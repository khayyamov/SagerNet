name: Mieru Plugin Release Build
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag'
        required: true
jobs:
  check:
    name: Check Access
    runs-on: ubuntu-latest
    steps:
      - name: "Check access"
        uses: "lannonbr/repo-permission-check-action@2.0.2"
        with:
          permission: "write"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  native:
    name: Native Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Fetch Status
        run: git submodule status 'plugin/mieru/*' > mieru_status
      - name: Mieru Cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            plugin/mieru/src/main/jniLibs
          key: ${{ hashFiles('.github/workflows/*', 'bin/lib/mieru/*', 'mieru_status') }}
      - name: Gradle cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle.kts') }}
      - name: Install Golang
        uses: actions/setup-go@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          go-version: 1.20.7
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ./run plugin mieru
          zip -r soFiles.zip plugin/mieru/src/main/jniLibs
          echo "::set-output name=zip-path::soFiles.zip"
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: jniLibs
          path: ${{ steps.native.outputs.zip-path }}

  release:
    name: Create Release
    needs: native
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: jniLibs
          path: /tmp/jniLibs
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.tag }}
          body: |
            Release ${{ github.event.inputs.tag }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/jniLibs/soFiles.zip
          asset_name: soFiles.zip
          asset_content_type: application/zip
